# 题目描述
# 请你实现一个类SubrectangleQueries，它的构造函数的参数是一个 rows x cols的矩形（这里用整数矩阵表示），并支持以下两种操作：
#
# 1.updateSubrectangle(int row1, int col1, int row2, int col2, int newValue)
#
# 用newValue更新以(row1,col1)为左上角且以(row2,col2)为右下角的子矩形。
# 2.getValue(int row, int col)
#
# 返回矩形中坐标 (row,col) 的当前值。

# 示例1
# 输入：
# ["SubrectangleQueries","getValue","updateSubrectangle","getValue","getValue",
# "updateSubrectangle","getValue","getValue"]
# [[[[1,2,1],[4,3,4],[3,2,1],[1,1,1]]],[0,2],[0,0,3,2,5],[0,2],[3,1],[3,0,3,2,10],[3,1],[0,2]]
# 输出：
# [null,1,null,5,5,null,10,5]
# 解释：
# SubrectangleQueries subrectangleQueries = new SubrectangleQueries([[1,2,1],[4,3,4],[3,2,1],[1,1,1]]);
# // 初始的 (4x3) 矩形如下：
# // 1 2 1
# // 4 3 4
# // 3 2 1
# // 1 1 1
# subrectangleQueries.getValue(0, 2); // 返回 1
# subrectangleQueries.updateSubrectangle(0, 0, 3, 2, 5);
# // 此次更新后矩形变为：
# // 5 5 5
# // 5 5 5
# // 5 5 5
# // 5 5 5
# subrectangleQueries.getValue(0, 2); // 返回 5
# subrectangleQueries.getValue(3, 1); // 返回 5
# subrectangleQueries.updateSubrectangle(3, 0, 3, 2, 10);
# // 此次更新后矩形变为：
# // 5   5   5
# // 5   5   5
# // 5   5   5
# // 10  10  10
# subrectangleQueries.getValue(3, 1); // 返回 10
# subrectangleQueries.getValue(0, 2); // 返回 5
#
# 示例2
# 输入：
# ["SubrectangleQueries","getValue","updateSubrectangle","getValue","getValue","updateSubrectangle","getValue"]
# [[[[1,1,1],[2,2,2],[3,3,3]]],[0,0],[0,0,2,2,100],[0,0],[2,2],[1,1,2,2,20],[2,2]]
# 输出：
# [null,1,null,100,100,null,20]
# 解释：
# SubrectangleQueries subrectangleQueries = new SubrectangleQueries([[1,1,1],[2,2,2],[3,3,3]]);
# subrectangleQueries.getValue(0, 0); // 返回 1
# subrectangleQueries.updateSubrectangle(0, 0, 2, 2, 100);
# subrectangleQueries.getValue(0, 0); // 返回 100
# subrectangleQueries.getValue(2, 2); // 返回 100
# subrectangleQueries.updateSubrectangle(1, 1, 2, 2, 20);
# subrectangleQueries.getValue(2, 2); // 返回 20
'''
# 个人想法 在updateSubrectangle下对子矩阵中的数逐个更新值
#         在getValue中直接返回矩阵当前位置的值
class SubrectangleQueries:

    def __init__(self, rectangle: List[List[int]]):
        self.rectangle = rectangle

    def updateSubrectangle(self, row1: int, col1: int, row2: int, col2: int, newValue: int) -> None:
        for i in range(row1, row2 + 1, 1):
            for j in range(col1, col2 + 1, 1):
                self.rectangle[i][j] = newValue
        return self.rectangle

    def getValue(self, row: int, col: int) -> int:
        return self.rectangle[row][col]

# 时间复杂度T(n) = n**2 + 2 = O(n**2), n是子矩阵的长和宽
# 空间复杂度 O(n)每次只调用一个存储位置？？？
'''

# 目前最优解
# 由于updateSubrectangle只是更新矩阵并不需要输出，不必像个人想法中把矩阵更新
# 看getValue中的行和列是否在子矩阵中，在就有返回newValue，不在就返回data[row][col]
class SubrectangleQueries:

    def __init__(self, rectangle):
        self.data = rectangle
        self.update = []

    def updateSubrectangle(self, row1, col1, row2, col2, newValue):
        self.update.append((row1, col1, row2, col2, newValue))

    def getValue(self, row, col):
        res = None
        for i in range(len(self.update)-1, -1, -1):
            row1,col1,row2,col2, val = self.update[i]
            if row1 <= row <= row2 and col1<= col <= col2:
                res = val
                break

        return res if res else self.data[row][col]

# 时间复杂度 O(n),因为getValue，updateSubrectangle一次输入一组数中每个变量长度为n.
# 空间复杂度 O(1),只有常数个变量



