# 题目描述
# 给定一个字符串，你的任务是计算这个字符串中有多少个回文子串。
# 具有不同开始位置或结束位置的子串，即使是由相同的字符组成，也会被视作不同的子串。

# 官方解法
# 1 回文子串的长度有奇数和偶数之分，奇数长度的回文子串有一个回文中心，偶数长度的回文子串有两个回文中心，枚举找出所有可能的回文中心，
# 在回文中心两侧使用两个指针，如果两个指针指向两个想用字符就继续扩展，否则就停止扩展，使用count来统计出现的所有回文子串

class Solution:
    def countSubstrings(self, s: str) -> int:
        n = len(s)
        count = 0
        for i in range(2 * n - 1):
            l_i = i // 2
            r_i = l_i + i % 2
            while l_i >= 0 and r_i < n and s[l_i] == s[r_i]:
                l_i -= 1
                r_i += 1
                count += 1

        return count

# 时间复杂度：O(N**2)
# 空间复杂度：O(1)

# manacher(马拉车)



