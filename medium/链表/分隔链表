# 题目描述

# 给定一个头结点为 root 的链表, 编写一个函数以将链表分隔为 k 个连续的部分。每部分的长度应该尽可能的相等: 任意两部分的长度差距不能超过 1，也就是说可能有些部分为 null。
# 这k个部分应该按照在链表中出现的顺序进行输出，并且排在前面的部分的长度应该大于或等于后面的长度。返回一个符合上述规则的链表的列表。
# 举例： 1->2->3->4, k = 5 // 5 结果 [ [1], [2], [3], [4], null]


# 1 创建新列表
# 如果链表有N个结点，则分隔的链表中每个部分中都有 n/k个结点，且前N%k部分有一个额外的结点。我们可以用一个简单的循环来计算N。
# 现在对于每个部分，我们已经计算出该部分有多少个节点：width + (i < remainder ? 1 : 0)。我们创建一个新列表并将该部分写入该列表。
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def splitListToParts(self, root: ListNode, k: int) -> List[ListNode]:
        curr = root
        count = 0
        while curr:
            count += 1
            curr = curr.next

        width, remainder = divmod(count, k)

        ans = []
        curr = root

        for i in range(k):
            head = write = ListNode(None)
            for j in range(width + (i < remainder)):
                write.next = write = ListNode(curr.val)
                if curr:
                    curr = curr.next
            ans.append(head.next)

        return ans

# 时间复杂度：O(N + k)
# 空间复杂度：O(max(N, k))


# 2 分割链表

# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def splitListToParts(self, root: ListNode, k: int) -> List[ListNode]:
        curr = root
        count = 0
        while curr:
            count += 1
            curr = curr.next

        width, remainder = divmod(count, k)

        ans = []
        curr = root

        for i in range(k):
            head = curr
            for j in range(width + (i < remainder) - 1):
                if curr:
                    curr = curr.next
            if curr:
                curr.next, curr = None, curr.next
            ans.append(head)

        return ans

# 时间复杂度：O(N + k)
# 空间复杂度：O(k)
