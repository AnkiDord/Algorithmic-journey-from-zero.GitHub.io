# 题目描述
# 最长回文数中只会出现一个奇数长度的字符其余的都是偶数, 统计所有出现偶数次字符数目和，加上出现奇数次字符-1，在判断如果和小于字符长度在加1

class Solution:
    def longestPalindrome(self, s: str) -> int:
        count = {}
        if len(s) == 1:
            return len(s)
        else:
            for i in s:
                if i not in count:
                    count[i] = count.get(i, 0) + 1
                else:
                    count[i] += 1

            count_palindrome = 0

            for i in count:
                if count[i] % 2 != 0:
                    count_palindrome += count[i] - 1

                elif count[i] % 2 == 0:
                    count_palindrome += count[i]
            if count_palindrome < len(s):
                count_palindrome += 1
            return count_palindrome


class Solution:
    def longestPalindrome(self, s: str) -> int:
        count = {}
        if len(s) == 1:
            return len(s)
        else:
            for i in s:
                if i not in count:
                    count[i] = count.get(i, 0) + 1
                else:
                    count[i] += 1

            count_palindrome = 0
            for i in count:
                count_palindrome += (count[i]//2) * 2
                if count_palindrome % 2 == 0 and count[i] % 2 == 1:
                    count_palindrome += 1

            return count_palindrome

# 时间复杂度：O(N) N字符串长度
# 空间复杂度：O(S) S出现字母个数


# 官方解法
# 贪心
# 回文数中只会出现一个奇数次的字符，用ans来统计回文数长度，偶数长度字符可以分配到回文数两侧，奇数长度字符需要减一，上诉用公式表示为count[i]//2*2
# 当ans为偶数且v(各个字符串出现的长度)为奇数时加1

class Solution:
    def longestPalindrome(self, s: str) -> int:
        ans = 0
        count = collections.Counter(s)  # 相当于使用字典来统计各个字母出现的次数
        for v in count.values():
            ans += v // 2 * 2
            if ans % 2 == 0 and v % 2 == 1:
                ans += 1
        return ans

