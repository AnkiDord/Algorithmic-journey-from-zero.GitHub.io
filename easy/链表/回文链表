# 题目描述
# 回文链表

# 调用栈，把head的值放到栈中利用栈的性质先进后出，把尾部元素一个一个弹出，与head.val比较如果不相等即不是回文数
class Solution:
    def isPalindrome(self, head: ListNode) -> bool:
        arr = []
        curr_node = head
        while curr_node:
            arr.append(curr_node.val)
            curr_node = curr_node.next

        while head:
            curr = arr.pop()
            if head.val != curr:
                return False

            head = head.next

        return True

# 时间复杂度：O(N)
# 空间复杂度：O(N)
# 注意链表在添加到栈中后自己变成空

# 1 将值复制到数组中后用双指针法
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def isPalindrome(self, head: ListNode) -> bool:
        arr = []
        curr_node = head
        while curr_node:
            arr.append(curr_node.val)
            curr_node = curr_node.next

        for i in range(len(arr)):
            if arr[i] != arr[-(i + 1)]:
                return False

        return True
# 时间复杂度：O(N)
# 空间复杂度：O(N)

# 2 递归
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def isPalindrome(self, head: ListNode) -> bool:
        self.front_pointer = head

        def recursively_check(current_node=head):
            if current_node is not None:
                if not recursively_check(current_node.next):
                    return False
                if self.front_pointer.val != current_node.val:
                    return False
                self.front_pointer = self.front_pointer.next

            return True

        return recursively_check()
# 时间复杂度：O(N)
# 空间复杂度：O(N)
