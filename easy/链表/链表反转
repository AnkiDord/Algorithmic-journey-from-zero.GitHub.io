# 题目描述
# 反转一个单链表。

# 示例
# 输入: 1->2->3->4->5->NULL
# 输出: 5->4->3->2->1->NULL

# 官方解法
# 1 迭代
# 假设链表为1→2→3→∅，我们想要把它改成∅←1←2←3。
# 在遍历链表时，将当前节点的next指针改为指向前一个节点。由于节点没有引用其前一个节点，
# 因此必须事先存储其前一个节点。在更改引用之前，还需要存储后一个节点。最后返回新的头引用
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def reverseList(self, head: ListNode) -> ListNode:
        curr = head
        front_node = None
        while curr != None:
            after_node = curr.next
            curr.next = front_node
            front_node = curr
            curr = after_node

        return front_node

# 时间复杂度：O(N)
# 空间复杂度：O(1)

# 2 递归
#
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def reverseList(self, head: ListNode) -> ListNode:
        if head == None or head.next == None:
            return head
        else:
            newhead = self.reverseList(head.next)
            head.next.next = head
            head.next = None

            return newhead

# 时间复杂度：O(N), 即链表长度，用于翻转链表的操作次数
# 空间复杂度：O(N)，调用栈所使用的层数，最多为N层
