# 题目描述
# 给定一个排序链表，删除所有重复的元素，使得每个元素只出现一次。

# 示例1
# 输入: 1->1->2
# 输出: 1->2

# 示例2
# 输入: 1->1->2->3->3
# 输出: 1->2->3

# 哈希表， 创建一个列表看链表中的节点的值是否在列表中，不在就添加，在就将次节点删除

# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def deleteDuplicates(self, head: ListNode) -> ListNode:
        curr = head
        arr = []
        pred = head
        while curr:
            if curr.val not in arr:
                arr.append(curr.val)
                pred = curr
                curr = curr.next
            else:
                pred.next = pred.next.next
                curr = curr.next

        return head

#  时间复杂度：O(N) 链表长度
# 空间复杂度：O(N)

# 官方
# 直接法
# 判断当前节点值与下一节点值是否相等，相等就删除下一节点值
# 比我的想法在空间复杂度上会减少，O(1)

# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def deleteDuplicates(self, head: ListNode) -> ListNode:
        curr = head
        while curr and curr.next:
            if curr.val == curr.next.val:
                curr.next = curr.next.next  # 不能每次都curr = curr.next 像[1,1,1]就不行
            else:
                curr = curr.next

        return head

# 时间复杂度：O(N)
# 空间复杂度：O(1)
