# 题目描述
# 给定一个数组 nums，编写一个函数将所有 0 移动到数组的末尾，同时保持非零元素的相对顺序。

# 示例
# 输入: [0,1,0,3,12]
# 输出: [1,3,12,0,0]

# 要求
# 必须在原数组上操作，不能拷贝额外的数组。
# 尽量减少操作次数。

# 官方解法双指针
# 用两个指针i，j，其中j是统计数组中非零元素的个数
# 用i遍历整个数组如果nums[i] != 0就将i, j对应元素位置调换
# 遍历结束后将nums[j: len(nums)]元素赋值0即可

class Solution:
    def moveZeros(self, nums: List[int]) -> None:
        if len(nums) == 0:
            return 0

        j = 0
        # 统计数组中非零元素个数
        for i in range(len(nums)):
            if nums[i]:
                nums[j] = nums[i]
                j += 1

        for i in range(j, len(nums)):
            nums[i] = 0

        return nums

# 时间复杂度：T(N) = O(N) + O(N-M) + 4 = O(N), 其中N是数组长度，M为非零元素个数
# 空间复杂度：O(1), 只需要常数的空间存放若干变量。

# 另一种写法
class Solution:
    def moveZeroes(self, nums: List[int]) -> None:
        n = len(nums)
        left, right = 0, 0
        while right < n:
            if nums[right]:
                nums[left], nums[right] = nums[right], nums[left]
                left += 1
            right += 1
        return nums

