# 题目描述
给你一个正整数数组 arr ，请你计算所有可能的奇数长度子数组的和。子数组 定义为原数组中的一个连续子序列。请你返回 arr 中 所有奇数长度子数组的和 。

# 示例1
输入：arr = [1,4,2,5,3]
输出：58
解释：所有奇数长度子数组和它们的和为：
[1] = 1
[4] = 4
[2] = 2
[5] = 5
[3] = 3
[1,4,2] = 7
[4,2,5] = 11
[2,5,3] = 10
[1,4,2,5,3] = 15
我们将所有值求和得到 1 + 4 + 2 + 5 + 3 + 7 + 11 + 10 + 15 = 58

# 示例2
输入：arr = [1,2]
输出：3
解释：总共只有 2 个长度为奇数的子数组，[1] 和 [2]。它们的和为 3 。

# 示例3
输入：arr = [10,11,12]
输出：66


个人想法将奇数长度子数组放入到一个列表中求和即可。
class Solution:
    def sumOddLengthSubarrays(self, arr: List[int]) -> int:
        sum_out = []
        n = -1
        while(n <= len(arr)):
            n = n + 2
            for i in range(len(arr)//n * n):
                b = i + n
                if b > len(arr):
                    break
                sum_out.append(sum(arr[i: i + n]))
            print(sum_out)
        return sum(sum_out)
        
