# 题目描述
给你一个正整数数组 arr ，请你计算所有可能的奇数长度子数组的和。子数组 定义为原数组中的一个连续子序列。请你返回 arr 中 所有奇数长度子数组的和 。

# 示例1
输入：arr = [1,4,2,5,3]
输出：58
解释：所有奇数长度子数组和它们的和为：
[1] = 1
[4] = 4
[2] = 2
[5] = 5
[3] = 3
[1,4,2] = 7
[4,2,5] = 11
[2,5,3] = 10
[1,4,2,5,3] = 15
我们将所有值求和得到 1 + 4 + 2 + 5 + 3 + 7 + 11 + 10 + 15 = 58

# 示例2
输入：arr = [1,2]
输出：3
解释：总共只有 2 个长度为奇数的子数组，[1] 和 [2]。它们的和为 3 。

# 示例3
输入：arr = [10,11,12]
输出：66


个人想法将奇数长度子数组放入到一个列表中求和即可。
class Solution:
    def sumOddLengthSubarrays(self, arr: List[int]) -> int:
        sum_out = []
        n = -1
        while(n <= len(arr)):
            n = n + 2 
            for i in range(len(arr)//n * n):
                b = i + n
                if b > len(arr):
                    break
                sum_out.append(sum(arr[i: b]))
            print(sum_out)
        return sum(sum_out)

1.把sum_out改成整数o，sum_out.append(sum(arr[i: i + n]))改成，sum_out += sum(arr[i: i + n]，return sum_out，可减少内存和运算时间
2.m个数中连续取n个数一共能取m-n+1组, 将len(arr)//n * n改成len(arr)-n+1，把b去掉改成i+n，可减少运行时间
3.将while去掉换成for j in range(1, len(arr)+1, 2),把n去点换成j即可减少时间复杂度和空间复杂度
class Solution:
    def sumOddLengthSubarrays(self, arr: List[int]) -> int:
        sum_out = 0
        for j in range(1, len(arr)+1, 2):
            for i in range(len(arr)-j+1):
                sum_out = sum_out + sum(arr[i: i + j])
        return sum_out
4.去掉sum函数多加一层循环，会增加时间复杂度
class Solution:
    def sumOddLengthSubarrays(self, arr: List[int]) -> int:
        sum_out = 0
        for j in range(1, len(arr)+1, 2):
            for i in range(len(arr)-j+1):
                for l in arr[i:i+j]:
                    sum_out = sum_out + l
        return sum_out


# 优质解法
odd奇数，even偶数
* 对于每个元素i(数组中下标为i)来说，要构成奇数长度的子数组
  即 i左边的元素个数left+i本身自己一个+右边元素的个数right=奇数
  即 left+right=偶数
* 满足a+b=偶数就只有两种情况
  1. 奇数+奇数=偶数
  2. 偶数+偶数=偶数
* 1. 所以只需要求得i左边可以选择奇数长度的可能有多少种，即left_odd,同样求右边奇数right_odd
     就可以求出策略1有多少种可能(待解决的点)
  2. 所以只需要求得i左边可以选择偶数长度的可能有多少种，即left_odd,同样求右边偶数right_odd
     就可以求出策略1有多少种可能，注意0也算选择的一种可能(待解决的点)
* 即元素i在所有奇数长度子数组出现的次数总和是
  left_odd*right_odd+left_even*right_even
* 元素i左边元素共有i个，右边元素共有siz-i-1个
class Solution:
    def sumOddLengthSubarrays(self, arr: List[int]) -> int:
        sum_out = 0
        for i in range(len(arr)):
            left_odd = (i+1) // 2  # 这个是计算以奇数长度出现的可能性有几种，长度为1，不管几个都是一种，长度1，3算是两种，其余一样
            left_even = i // 2 +1
            right_odd = (len(arr)-i) // 2
            right_even = (len(arr)-i+1) // 2
            sum_out += (left_odd*right_odd + left_even*right_even) * arr[i]
        return sum_out

# 时间复杂度：O(N)数组长度
# 空间复杂度：O(1) 只需要sum_out存储数字



